package stp.strings.chuoidoixung3;

import java.io.FileInputStream;
import java.util.Iterator;
import java.util.Scanner;

import utils.MyUtils;

public class Solution {

	static int T;

	static int size;
	static char[][] arr;

	static int resLen;
	static String resStr;

	public static void main(String[] args) {
		try {
			System.setIn(new FileInputStream(MyUtils.getAbsolutePath("stp\\strings\\chuoidoixung3")));
			Scanner s = new Scanner(System.in);

			T = s.nextInt();
			for (int tc = 1; tc <= T; tc++) {
				size = s.nextInt();
				arr = new char[size][size];

				// input
				for (int i = 0; i < size; i++) {
					String str = s.next();
					for (int j = 0; j < size; j++) {
						arr[i][j] = str.charAt(j);
					}
				}

				// solve
				resLen = 0;
				resStr = "";
				for (int i = 0; i < size; i++) {
					checkRow(arr[i]);
				}

				for (int j = 0; j < size; j++) {
					char[] cs = new char[size];
					for (int i = 0; i < size; i++) {
						cs[i] = arr[i][j];
					}
					checkCol(cs);
				}

				System.out.println("#" + tc + " " + resLen + " " + resStr);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void checkRow(char[] cs) {
		for (int i = 0; i < cs.length; i++) {
			for (int j = cs.length - 1; j > i; j--) {
				if (cs[i] == cs[j]) {
					int len = j - i + 1;

					if (check(cs, i, len) && resLen < len) {
						resLen = len;
						resStr = "";
						for (int k = i; k < len; k++) {
							resStr += cs[k];
						}
					}
				}
			}
		}
	}

	private static boolean check(char[] cs, int i, int len) {
		for (int k = i; k < len / 2; k++) {
			if (cs[k] != cs[len - 1 - k]) {
				return false;
			}
		}
		return true;
	}

	private static void checkCol(char[] cs) {

	}

	private static void exec(char[] cs) {
		for (int i = 0; i < cs.length; i++) {
			for (int j = cs.length - 1; j > i; j--) {
				if (cs[i] == cs[j]) {
					boolean check = true;

					// check isSymmetric
					int len = j - i + 1;
					for (int k = i; k < len; k++) {
						if (cs[k] != cs[len - 1 - k]) {
							check = false;
							break;
						}
					}

					if (check && resLen < len) {
						resStr = ""; // reset resStr for new one
						resLen = len;
						for (int k = i; k < len; k++) {
							resStr += cs[k];
						}
					}
				}
			}
		}
	}
}
